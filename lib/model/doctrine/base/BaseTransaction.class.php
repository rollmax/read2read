<?php

/**
 * BaseTransaction
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_period
 * @property enum $operation
 * @property decimal $amount
 * @property integer $id_sender
 * @property integer $id_receiver
 * @property decimal $sender_balance_before
 * @property decimal $sender_balance_after
 * @property decimal $receiver_balance_before
 * @property decimal $receiver_balance_after
 * @property string $notes
 * @property boolean $is_paid
 * @property Period $Period
 * @property Doctrine_Collection $ContentPurchase
 * 
 * @method integer             getIdPeriod()                Returns the current record's "id_period" value
 * @method enum                getOperation()               Returns the current record's "operation" value
 * @method decimal             getAmount()                  Returns the current record's "amount" value
 * @method integer             getIdSender()                Returns the current record's "id_sender" value
 * @method integer             getIdReceiver()              Returns the current record's "id_receiver" value
 * @method decimal             getSenderBalanceBefore()     Returns the current record's "sender_balance_before" value
 * @method decimal             getSenderBalanceAfter()      Returns the current record's "sender_balance_after" value
 * @method decimal             getReceiverBalanceBefore()   Returns the current record's "receiver_balance_before" value
 * @method decimal             getReceiverBalanceAfter()    Returns the current record's "receiver_balance_after" value
 * @method string              getNotes()                   Returns the current record's "notes" value
 * @method boolean             getIsPaid()                  Returns the current record's "is_paid" value
 * @method Period              getPeriod()                  Returns the current record's "Period" value
 * @method Doctrine_Collection getContentPurchase()         Returns the current record's "ContentPurchase" collection
 * @method Transaction         setIdPeriod()                Sets the current record's "id_period" value
 * @method Transaction         setOperation()               Sets the current record's "operation" value
 * @method Transaction         setAmount()                  Sets the current record's "amount" value
 * @method Transaction         setIdSender()                Sets the current record's "id_sender" value
 * @method Transaction         setIdReceiver()              Sets the current record's "id_receiver" value
 * @method Transaction         setSenderBalanceBefore()     Sets the current record's "sender_balance_before" value
 * @method Transaction         setSenderBalanceAfter()      Sets the current record's "sender_balance_after" value
 * @method Transaction         setReceiverBalanceBefore()   Sets the current record's "receiver_balance_before" value
 * @method Transaction         setReceiverBalanceAfter()    Sets the current record's "receiver_balance_after" value
 * @method Transaction         setNotes()                   Sets the current record's "notes" value
 * @method Transaction         setIsPaid()                  Sets the current record's "is_paid" value
 * @method Transaction         setPeriod()                  Sets the current record's "Period" value
 * @method Transaction         setContentPurchase()         Sets the current record's "ContentPurchase" collection
 * 
 * @package    read2read
 * @subpackage model
 * @author     aSoft4Web Team <info@asoft4web.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTransaction extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('transaction');
        $this->hasColumn('id_period', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('operation', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'none',
              1 => 'deposit_u',
              2 => 'deposit_p',
              3 => 'purchase',
              4 => 'charges_service',
             ),
             'default' => 'none',
             'notnull' => true,
             ));
        $this->hasColumn('amount', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('id_sender', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('id_receiver', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('sender_balance_before', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('sender_balance_after', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('receiver_balance_before', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('receiver_balance_after', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('notes', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('is_paid', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Period', array(
             'local' => 'id_period',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('ContentPurchase', array(
             'local' => 'id',
             'foreign' => 'id_transaction'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}