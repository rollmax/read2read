<?php

/**
 * BaseBalanceSystem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_period
 * @property decimal $deposit_standart
 * @property decimal $deposit_expert
 * @property decimal $deposit_super
 * @property decimal $deposit_user
 * @property decimal $charges_standart
 * @property decimal $charges_expert
 * @property decimal $charges_super
 * @property decimal $charges_user
 * @property decimal $in_balance_standart
 * @property decimal $in_balance_super
 * @property decimal $in_balance_expert
 * @property decimal $in_balance_user
 * @property integer $sales_standart
 * @property integer $sales_super
 * @property integer $sales_expert
 * @property decimal $to_pay_standart
 * @property decimal $to_pay_super
 * @property decimal $to_pay_expert
 * @property decimal $r2r_standart
 * @property decimal $r2r_super
 * @property decimal $r2r_expert
 * @property Period $Period
 * 
 * @method integer       getIdPeriod()            Returns the current record's "id_period" value
 * @method decimal       getDepositStandart()     Returns the current record's "deposit_standart" value
 * @method decimal       getDepositExpert()       Returns the current record's "deposit_expert" value
 * @method decimal       getDepositSuper()        Returns the current record's "deposit_super" value
 * @method decimal       getDepositUser()         Returns the current record's "deposit_user" value
 * @method decimal       getChargesStandart()     Returns the current record's "charges_standart" value
 * @method decimal       getChargesExpert()       Returns the current record's "charges_expert" value
 * @method decimal       getChargesSuper()        Returns the current record's "charges_super" value
 * @method decimal       getChargesUser()         Returns the current record's "charges_user" value
 * @method decimal       getInBalanceStandart()   Returns the current record's "in_balance_standart" value
 * @method decimal       getInBalanceSuper()      Returns the current record's "in_balance_super" value
 * @method decimal       getInBalanceExpert()     Returns the current record's "in_balance_expert" value
 * @method decimal       getInBalanceUser()       Returns the current record's "in_balance_user" value
 * @method integer       getSalesStandart()       Returns the current record's "sales_standart" value
 * @method integer       getSalesSuper()          Returns the current record's "sales_super" value
 * @method integer       getSalesExpert()         Returns the current record's "sales_expert" value
 * @method decimal       getToPayStandart()       Returns the current record's "to_pay_standart" value
 * @method decimal       getToPaySuper()          Returns the current record's "to_pay_super" value
 * @method decimal       getToPayExpert()         Returns the current record's "to_pay_expert" value
 * @method decimal       getR2rStandart()         Returns the current record's "r2r_standart" value
 * @method decimal       getR2rSuper()            Returns the current record's "r2r_super" value
 * @method decimal       getR2rExpert()           Returns the current record's "r2r_expert" value
 * @method Period        getPeriod()              Returns the current record's "Period" value
 * @method BalanceSystem setIdPeriod()            Sets the current record's "id_period" value
 * @method BalanceSystem setDepositStandart()     Sets the current record's "deposit_standart" value
 * @method BalanceSystem setDepositExpert()       Sets the current record's "deposit_expert" value
 * @method BalanceSystem setDepositSuper()        Sets the current record's "deposit_super" value
 * @method BalanceSystem setDepositUser()         Sets the current record's "deposit_user" value
 * @method BalanceSystem setChargesStandart()     Sets the current record's "charges_standart" value
 * @method BalanceSystem setChargesExpert()       Sets the current record's "charges_expert" value
 * @method BalanceSystem setChargesSuper()        Sets the current record's "charges_super" value
 * @method BalanceSystem setChargesUser()         Sets the current record's "charges_user" value
 * @method BalanceSystem setInBalanceStandart()   Sets the current record's "in_balance_standart" value
 * @method BalanceSystem setInBalanceSuper()      Sets the current record's "in_balance_super" value
 * @method BalanceSystem setInBalanceExpert()     Sets the current record's "in_balance_expert" value
 * @method BalanceSystem setInBalanceUser()       Sets the current record's "in_balance_user" value
 * @method BalanceSystem setSalesStandart()       Sets the current record's "sales_standart" value
 * @method BalanceSystem setSalesSuper()          Sets the current record's "sales_super" value
 * @method BalanceSystem setSalesExpert()         Sets the current record's "sales_expert" value
 * @method BalanceSystem setToPayStandart()       Sets the current record's "to_pay_standart" value
 * @method BalanceSystem setToPaySuper()          Sets the current record's "to_pay_super" value
 * @method BalanceSystem setToPayExpert()         Sets the current record's "to_pay_expert" value
 * @method BalanceSystem setR2rStandart()         Sets the current record's "r2r_standart" value
 * @method BalanceSystem setR2rSuper()            Sets the current record's "r2r_super" value
 * @method BalanceSystem setR2rExpert()           Sets the current record's "r2r_expert" value
 * @method BalanceSystem setPeriod()              Sets the current record's "Period" value
 * 
 * @package    read2read
 * @subpackage model
 * @author     aSoft4Web Team <info@asoft4web.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBalanceSystem extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('balance_system');
        $this->hasColumn('id_period', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('deposit_standart', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('deposit_expert', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('deposit_super', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('deposit_user', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('charges_standart', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('charges_expert', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('charges_super', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('charges_user', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('in_balance_standart', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('in_balance_super', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('in_balance_expert', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('in_balance_user', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('sales_standart', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('sales_super', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('sales_expert', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('to_pay_standart', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('to_pay_super', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('to_pay_expert', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('r2r_standart', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('r2r_super', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
        $this->hasColumn('r2r_expert', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Period', array(
             'local' => 'id_period',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}