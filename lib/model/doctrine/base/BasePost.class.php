<?php

/**
 * BasePost
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_topic
 * @property integer $id_user
 * @property clob $content
 * @property Topic $Topic
 * @property User $User
 * 
 * @method integer getIdTopic()  Returns the current record's "id_topic" value
 * @method integer getIdUser()   Returns the current record's "id_user" value
 * @method clob    getContent()  Returns the current record's "content" value
 * @method Topic   getTopic()    Returns the current record's "Topic" value
 * @method User    getUser()     Returns the current record's "User" value
 * @method Post    setIdTopic()  Sets the current record's "id_topic" value
 * @method Post    setIdUser()   Sets the current record's "id_user" value
 * @method Post    setContent()  Sets the current record's "content" value
 * @method Post    setTopic()    Sets the current record's "Topic" value
 * @method Post    setUser()     Sets the current record's "User" value
 * 
 * @package    read2read
 * @subpackage model
 * @author     aSoft4Web Team <info@asoft4web.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePost extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('post');
        $this->hasColumn('id_topic', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('id_user', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('content', 'clob', null, array(
             'type' => 'clob',
             'notnull' => true,
             ));

        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Topic', array(
             'local' => 'id_topic',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'id_user',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}