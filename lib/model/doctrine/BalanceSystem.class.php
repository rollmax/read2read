<?php

/**
 * BalanceSystem
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    read2read
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class BalanceSystem extends BaseBalanceSystem
{

    public function getDepositPUsers()
    {
        return $this->getDepositStandart() + $this->getDepositSuper() + $this->getDepositExpert();
    }

    public function getChargesPUsers()
    {
        return $this->getChargesStandart() + $this->getChargesSuper() + $this->getChargesExpert();
    }

    public function getInBalancePUsers()
    {
        return $this->getInBalanceStandart() + $this->getInBalanceSuper() + $this->getInBalanceExpert();
    }

    public function getSalesPUsers()
    {
        return $this->getSalesStandart() + $this->getSalesSuper() + $this->getSalesExpert();
    }


    public function getToPayPUsers()
    {
        return $this->getToPayStandart() + $this->getToPaySuper() + $this->getToPayExpert();
    }

    public function getToPayPUsersForPrevPeriods()
    {
        $q = Doctrine_Query::create()
            ->select('sum(bu.payable) as bu_payable')
            ->from('BalanceUser bu')
            ->innerJoin('bu.User u')
            ->where('bu.id_period != ?', Period::getCurrentPeriod()->getId())
            ->andWhere("u.utype = 'puser'")
            ->andWhere('bu.was_paid = 0')
            ->execute();

        return $q->getFirst()->getBuPayable();
    }

    public function getR2rPUsers()
    {
        return $this->getR2rStandart() + $this->getR2rSuper() + $this->getR2rExpert();
    }

    public static function getCurrentBalanceInstance()
    {
        $sysBalance = BalanceSystemTable::getInstance()->findOneByIdPeriod(Period::getCurrentPeriod()->getId());
        if (!$sysBalance) {
            $sysBalance = new BalanceSystem();
            $sysBalance->setPeriod(Period::getCurrentPeriod());
            $sysBalance->countInBalance();
            $sysBalance->save();
        }

        return $sysBalance;
    }

    public function countInBalance()
    {
        if ($this->getInBalancePUsers() + $this->getInBalanceUser() > 0) {
            // похоже уже считали входной баланс, сваливаем
            return;
        }

        $this->setInBalanceUser((float)UserTable::getUsersBalance('none'));
        $this->setInBalanceStandart((float)UserTable::getUsersBalance('standart'));
        $this->setInBalanceExpert((float)UserTable::getUsersBalance('expert'));
        $this->setInBalanceSuper((float)UserTable::getUsersBalance('super'));
    }

    public static function genMassPayWM($pay=true)
    {

        $max_id = Doctrine_Query::create()
            ->select('max(bu.was_paid_id) as bu_max')
            ->from('BalanceUser bu')
            ->where('bu.was_paid > 0')
            ->execute()->getFirst()->getBuMax();

        $q = Doctrine_Query::create()
            ->select("bu.id_user, u.account_number as account_number, sum(bu.payable) as to_pay,
                group_concat(p.date separator '|') as p_date, group_concat(bu.id separator '|') as for_ids")
            ->from('BalanceUser bu')
            ->innerJoin('bu.User u')
            ->innerJoin('bu.Period p')
            ->where('bu.was_paid = 0')
            ->andWhere('bu.payable > 0')
            ->andWhere("u.utype = 'puser'")
            ->andWhere('bu.id_period != ?', Period::getCurrentPeriod()->getId())
//            ->andWhere('bu.was_paid_id is null')
            ->groupBy('bu.id_user')
            ->execute();

        $min_payout = (float)Setting::getValueByName('minPayout');

        $out = array();
        $out_num = 0;
        foreach ($q as $rec) {
            if (preg_match('/^R[0-9]{12}$/', $rec->getAccountNumber()) && ($rec->getToPay() >= $min_payout)) {
                if ($pay===true) {
                    $max_id = (int)$max_id + 1;
                    $bu_ids = explode('|', $rec->getForIds());
                    foreach ($bu_ids as $bu_id) {
                        $bu = BalanceUserTable::getInstance()->findOneById($bu_id);
                        $bu->setWasPaidId($max_id);
                        $bu->save();
                    }

                    $per = array();
                    $per_dates = explode('|', $rec->getPDate());
                    foreach ($per_dates as $p_date) {
                        $p_date_t = explode('-', $p_date);
                        $per[] = $p_date_t[1] . '/' . $p_date_t[0];
                    }


                    $row = array();
                    $row[] = $rec->getAccountNumber();  // номер кошелька
                    $row[] = $rec->getToPay();          // сумма тут надо разобраться с валютой
                    $row[] = mb_convert_encoding('Выплата за ', 'cp1251', 'utf-8') . join(', ', $per) . '. read2read.ru, payId:' . $max_id; // комментарий к выплате
                    $row[] = $max_id;                        // номер платежа
                    $out[] = join(';', $row);
                } else {
                    $out_num += $rec->getToPay();
                }
            }
        }

        if ($pay === true) {
            return join(PHP_EOL, $out);
        } else {
            return (int)$out_num;
        }
    }

    public static function processMP($mpfile)
    {
        $paid = 0;

        foreach ($mpfile as $str) {
            $pm = explode(';', $str);
            if (!preg_match('/^MassPay Transaction.*payId:([\d]+)$/', str_replace('"', '', $pm[6]), $pId)) {
                continue;
            } else {
                $paid += BalanceUserTable::setPaid($pId[1], floatval($pm[2]));
            }
        }
        return $paid;
    }
}
