<?php

/**
 * UserTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UserTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object UserTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('User');
    }

    /**
     * Query for uuser list
     * @param Doctrine_Query $q
     * @return Doctrine_Query
     */
    public function retrieveBackendUuserList(Doctrine_Query $q)
    {
        $rootAlias = $q->getRootAlias();
        $q->leftJoin($rootAlias . '.BalanceUser bu');
        $q->andWhere($rootAlias . '.utype=?', 'uuser');

        return $q;
    }

    /**
     * Query for puser list
     * @param Doctrine_Query $q
     * @return Doctrine_Query
     */
    public function retrieveBackendPuserList(Doctrine_Query $q = null)
    {
        if ($q == null) {
            $q = Doctrine_Query::create()
                ->from('user u');
        }

        $rootAlias = $q->getRootAlias();
        $q->leftJoin($rootAlias . '.BalanceUser bu');
        $q->andWhere($rootAlias . '.utype=?', 'puser');

        return $q;
    }

    /**
     * Returns query with left join of BalanceUser
     *
     * @param <string> $fieldName
     * @return Doctrine_Query
     */
    public static function getBalanceUserFieldSum($fieldName)
    {
        $q = Doctrine_Query::create()
            ->select('SUM(bu.' . $fieldName . ') as ' . $fieldName . '_sum')
            ->from('User u')
            ->leftJoin('u.BalanceUser as bu');

        return $q;
    }

    /**
     * Enter description here...
     *
     * @return <Doctrine_Collection>
     */
    public static function getPUsersActive()
    {
        $q = UserTable::addPUserQuery();
        $q = UserTable::addActiveQuery($q);

        return $q->execute();
    }

    /**
     * Add user active state to SQL Query
     *
     * @param Doctrine_Query $q
     * @return Doctrine_Query
     */
    public static function addActiveQuery(Doctrine_Query $q = null)
    {
        if (is_null($q)) {
            $q = Doctrine_Query::create()->from('user u');
        }

        $alias = $q->getRootAlias();
        $q->andWhere($alias . '.active=?', true)
            ->andWhere($alias . '.is_blocked=?', false);

        return $q;
    }

    /**
     * Add P User type to SQL Query
     *
     * @param Doctrine_Query $q
     * @return Doctrine_Query
     */
    public static function addPUserQuery(Doctrine_Query $q = null)
    {
        if (is_null($q)) {
            $q = Doctrine_Query::create()->from('user u');
        }

        $alias = $q->getRootAlias();
        $q->andWhere($alias . '.utype=?', 'puser');

        return $q;
    }

    public static function getUsersBalance($type)
    {
        $q = Doctrine_Query::create()
            ->select('sum(u.balans) as balans_sum')
            ->from('user u')
            ->where('u.tariff = ?', $type)
            ->andWhere('u.id != 1');
        $q->execute();

        $res = $q->fetchOne();

        return $res['balans_sum'];
    }

    public static function setNewTariffs()
    {
        $q = UserTable::addPUserQuery();
        $alias = $q->getRootAlias();
        $res = $q->andWhere($alias . '.tariff_change_date is not NULL')
            ->execute();

        foreach ($res as $user) {
            if ($user->getTariffChange() != 'none') {
                $user->setTariff($user->getTariffChange());
                $user->setTariffChange('none');
                $user->setTariffChangeDate(null);
                $user->save();
            }
        }
    }

    public static function countWeights(Period $period)
    {
        // общая сумма продаж
        $tSum = BalanceSystemTable::getInstance()->findOneByIdPeriod($period->getId())->getToPayPUsers();

        $q = UserTable::addPUserQuery()
            ->execute();

        foreach ($q as $user) {
            if (($bu = BalanceUserTable::getByUserIdAndPeriodId($user->getId(), $period->getId())) !== false) {
                $uWeight = $bu->getPayable() * 100 / $tSum;
                $user->setWeight((float)$uWeight);
                $user->save();
            }
        }
    }
}