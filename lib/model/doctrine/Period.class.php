<?php

/**
 * Period
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    read2read
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Period extends BasePeriod
{
    protected static $monthsNames = array(
        1 => 'Январь',
        'Февраль',
        'Март',
        'Апрель',
        'Май',
        'Июнь',
        'Июль',
        'Август',
        'Сентябрь',
        'Октябрь',
        'Ноябрь',
        'Декабрь'
    );

    public static function getCurPeriodDate()
    {
        $virtPeriod = SettingTable::getOptionByName('virtPeriod')->getValue();

        if (strlen($virtPeriod) == 7) {
            $date = $virtPeriod;
        } else {
            $date = date('Y-m');
        }

        return $date;
    }
    /**
     * Returns current period instance
     *
     * @return <Doctrine_Object> instance of Period
     */
    public static function getCurrentPeriod()
    {
        $date = Period::getCurPeriodDate();
        $oPeriod = PeriodTable::getInstance()->findOneByDate($date);

        if (!($oPeriod instanceof Period)) {
            $oPeriod = new Period();
            if (($prev = Period::getPrevPeriod()) === false) {
                $price1k = SettingTable::getOptionByName('price1k')->getValue();
            } else {
                if (($price1k = VoteTable::getVoted1k($prev)) === false) {
                    $price1k = $prev->get1k();
                }
            }
            $oPeriod->set1k(number_format((float)$price1k, 2));
            $oPeriod->setDate($date);
            $oPeriod->save();
            //throw new sfException('Cannot get current period. Error in DB data');
        }

        return $oPeriod;
    }

    public static function getPrevPeriod()
    {
        $now = explode('-', Period::getCurPeriodDate());
        $nowYear = $now[0];
        $nowMonth= $now[1];

        if ($nowMonth - 1 == 0) {
            $prevMonth = 12;
            $prevYear = $nowYear - 1;
        } else {
            $prevMonth = $nowMonth - 1;
            $prevYear = $nowYear;
        }

        $oPeriod = PeriodTable::getInstance()->findOneByDate($prevYear . '-' . $prevMonth);

        return $oPeriod;
    }

    /**
     * Returns Period Numeric value of the month
     * @return <ionteger> $monthNumeric
     */
    public function getMonthNumeric()
    {
        $dateArray = explode('-', $this->getDate());

        return $dateArray[1];
    }

    public function getYear()
    {
        $dateArray = explode('-', $this->getDate());

        return $dateArray[0];
    }

    /**
     * Returns rus name of the period month
     * @return <string> month name (rus)
     */
    public function getMonthString()
    {
        return self::$monthsNames[intval($this->getMonthNumeric())];
    }

    public function getVotes()
    {
        return VoteTable::getInstance()->getVotesList($this->getId());
    }
}
