<?php

/**
 * ContentTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ContentTable extends Doctrine_Table
{

    public function addContentPublishedListQuery(Doctrine_Query $q = null)
    {
        if (is_null($q)) {
            $q = Doctrine_Query::create()->from('Content cont');
        }

        $alias = $q->getRootAlias();
        $q->andWhere($alias . '.state=?', 'public')
            ->andWhere($alias . '.is_blocked=?', false)
            ->andWhere($alias . '.to_delete=?', false);

        return $q;
    }

    public function getUserStatsNoPublished($user_id = 0)
    {
        $stats = array('article_count' => 0, 'letters_summ' => 0);
        $q = Doctrine_Query::create()
            ->select('COUNT(id) as article_count')
            ->from('Content cont')
            ->where('id_user=?', $user_id)
            ->andWhere('state=?', 'draft')
            ->andWhere('to_delete=?', false);
        $stats['article_count'] = $q->execute(array(), Doctrine::HYDRATE_SINGLE_SCALAR);

        $q = Doctrine_Query::create()
            ->select('SUM(letters_k) as letters_summ')
            ->from('Content cont')
            ->where('id_user=?', $user_id)
            ->andWhere('state=?', 'draft')
            ->andWhere('to_delete=?', false);
        $stats['letters_summ'] = $q->execute(array(), Doctrine::HYDRATE_SINGLE_SCALAR);

        return $stats;
    }

    public function getUserStatsPublished($user_id = 0)
    {
        $stats = array('article_count' => 0, 'letters_summ' => 0);
        $q = Doctrine_Query::create()
            ->select('COUNT(id) as article_count')
            ->from('Content cont')
            ->where('id_user=?', $user_id)
            ->andWhere('state=?', 'public')
            ->andWhere('to_delete=?', false);
        $stats['article_count'] = $q->execute(array(), Doctrine::HYDRATE_SINGLE_SCALAR);

        $q = Doctrine_Query::create()
            ->select('SUM(letters_k) as letters_summ')
            ->from('Content cont')
            ->where('id_user=?', $user_id)
            ->andWhere('state=?', 'public')
            ->andWhere('to_delete=?', false);
        $stats['letters_summ'] = $q->execute(array(), Doctrine::HYDRATE_SINGLE_SCALAR);

        return $stats;
    }


    /**
     * Returns query for pagination in user published content list
     *
     * @param <integer> $userId
     * @return Doctrine_Query
     */
    public static function getPublishedListQuery($userId = 0)
    {
        $q = Doctrine_Query::create()
            ->select('c.*, cat.*')
            ->from('Content c')
            ->innerJoin('c.Category cat')
            ->where('id_user=?', $userId)
            ->andWhereIn('state', array('public'))
            ->orderBy('updated_at DESC');

        return $q;
    }

    public static function getSoldArticlesQuery(User $user, Period $period, $c_sort = null)
    {
        if (!is_null($c_sort)) {
            $sortby = $c_sort['sortby'];
            $order = $c_sort['order'];
        } else {
            $sortby = 'pub_date';
            $order = 'desc';
        }
        $q = Doctrine_Query::create()
            ->select('c.id, sum(t.amount) as sell_sum, count(cp.id) as sell_count')
            ->from('Content c')
            ->leftJoin('c.Category ct')
            ->leftJoin('c.ContentPurchase cp')
            ->leftJoin('cp.Transaction t with t.id_period = ?', $period->getId())
            ->where('c.id_user = ?', $user->getId())
            ->andWhere('c.state = "public"')
            ->groupBy('c.id')
            ->orderBy("$sortby $order");

        return $q;
    }

    /**
     * Returns query for pagination in user not published content list
     *
     * @param <integer> $userId
     * @return Doctrine_Query
     */
    public static function getNotPublishedListQuery($userId = 0)
    {
        $q = Doctrine_Query::create()
            ->select('c.*, cat.*')
            ->from('Content c')
            ->innerJoin('c.Category cat')
            ->where('id_user=?', $userId)
            ->andWhere('state=? OR (state=? AND to_delete=?)', array('draft', 'public', true))
            ->orderBy('updated_at DESC');

        return $q;
    }

    /**
     * Return published articles list
     *
     * @param int $user_id - p_user ID
     * @return Doctrine_Collection
     */
    public function getPublishedList($user_id = 0)
    {
        return $this->getContentList(array('user_id' => $user_id, 'state' => array('public')));
    }

    /**
     * Return No published articles list
     *
     * @param int $user_id - p_user ID
     * @return Doctrine_Collection
     */
    public function getNopublishedList($user_id = 0)
    {
        $q = $this->createQuery('cont')
            ->where('id_user=?', $user_id)
            ->andWhere('state=? OR (state=? AND to_delete=?)', array('draft', 'public', true));

        return $q->execute();
    }

    /**
     * Enter description here...
     *
     * @param array $params
     *          $params['user_id'] - p_user ID
     *          $params['state'] - array of values of DB field 'state'
     * @return Doctrine_Collection
     */
    private function getContentList($params)
    {
        $q = $this->createQuery('cont')
            ->where('id_user=?', $params['user_id'])
            ->andWhereIn('state', $params['state']);

        return $q->execute();
    }

    /**
     * Add contenet: No Blocked SQL Query
     *
     * @param Doctrine_Query $q
     * @return Doctrine_Query
     */
    static public function addNoBlockedContent(Doctrine_Query $q = null)
    {
        if (null === $q) {
            $q = Doctrine_Query::create()->from('Content cont');
        }

        $alias = $q->getRootAlias();
        $q->andWhere($alias . '.is_blocked=?', false);

        return $q;
    }

    public function addNotDeletedContent(Doctrine_Query $q = null)
    {
        if (is_null($q)) {
            $q = Doctrine_Query::create()->from('Content cont');
        }

        $alias = $q->getRootAlias();
        $q->andWhere($alias . '.state!=?', 'deleted');

        return $q;
    }

    /**
     * Returned article available for sale by article ID.
     * Else return FALSE
     *
     * @param int $article_id - article ID
     * @return object Content
     */
    public function getArticleForSale($article_id)
    {
        $q = Doctrine_Query::create()
            ->from('Content cont')
            ->where('id=?', $article_id)
            ->limit(1);
        $q = $this->addContentPublishedListQuery($q);

        return $q->fetchOne();
    }

    /**
     * Returns an instance of this class.
     *
     * @return object ContentTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Content');
    }
}